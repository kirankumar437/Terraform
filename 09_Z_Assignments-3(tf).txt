Adding Maps and Lookups in your Terraform files
The lab files can be found @ https://github.com/satyensingh/terraform-assignment-resources.git
In the repo you will find main.tf, outputs.tf, and variables.tf.
Add a new variable called env. Set a description to “env: dev or prod”.
Convert the type from image_name to map.

Change the default to use key/value pairs. Set dev to ghost:latest and prod to ghost:alpine.

Convert container_name to a map. Change the default to use key/value pairs. Set dev to blog_dev and prod to blog_prod.

Convert ext_port to a map. Change the default to use key/value pairs. Set dev to 8080 and prod to 80.

Now initialize Terraform.

Setup the Development environment
Create a workspace called dev.
Generate a Terraform plan. Output the plan and call it tfdev_plan. Pass in a variable called env and set it to dev.
Apply tfdev_plan.

Setup the Production environment
Create a workspace called prod.
Generate a Terraform plan. Output the plan and call it tfprod_plan. Pass in a variable called env and set it to prod.
Apply tfprod_plan.

Verify both environments work
Open a browser and navigate to the public IP. This should pull up the production environment.
Open a browser tab and navigate to the public IP on port 8080. This should pull up the development environment.


#Note:DEV

vi main.tf

# Download the latest Ghost Image
resource "docker_image" "image_id"{
  name = "${var.image_name["${var.env}"]}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name["${var.env}"]}"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "${var.ext_port["${var.env}"]}"
  }
}


vi variables.tf

#Define variables
variable "image_name" {
  type = "map"
  description = "Image for container."
  default     = {
  dev         = "ghost:latest"
  prod        = "ghost:alpine"
  }
}

variable "container_name" {
  type = "map"
  description = "Name of the container."
  default     = {
  dev         = "blog_dev"
  prod        = "blog_prod"
  }
}

variable "ext_port" {
  type = "map"
  description = "External port for container."
  default     =  {
  dev         = "8080"
  prod        = "80"
  }
}

variable "env" {

  description = "env: dev or prod."
  default     = "dev"
}


vi outputs.tf

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}


terraform init
terraform validate
terraform apply
terraform destroy

terraform workspace list
terraform workspace new dev
terraform workspace select dev

terraform plan -out=tfdev_plan -var "env=dev"
terraform apply tfdev_plan


#Note:PROD

vi main.tf

# Download the latest Ghost Image
resource "docker_image" "image_id"{
  name = "${var.image_name["${var.env}"]}"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "${var.container_name["${var.env}"]}"
  image = "${docker_image.image_id.latest}"
  ports {
    internal = "2368"
    external = "${var.ext_port["${var.env}"]}"
  }
}


vi variables.tf

#Define variables
variable "image_name" {
  type = "map"
  description = "Image for container."
  default     = {
  dev         = "ghost:latest"
  prod        = "ghost:alpine"
  }
}

variable "container_name" {
  type = "map"
  description = "Name of the container."
  default     = {
  dev         = "blog_dev"
  prod        = "blog_prod"
  }
}

variable "ext_port" {
  type = "map"
  description = "External port for container."
  default     =  {
  dev         = "8080"
  prod        = "80"
  }
}

variable "env" {

  description = "env: dev or prod."
  default     = "prod"
}


vi outputs.tf

#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}



terraform init
terraform validate
terraform apply
terraform destroy

terraform workspace list
terraform workspace new dev
terraform workspace select dev

terraform plan -out=tfdev_plan -var "env=dev"
terraform apply tfdev_plan
